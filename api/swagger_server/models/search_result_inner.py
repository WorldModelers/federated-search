# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SearchResultInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data_location: str=None, id_value: str=None, name: str=None, description: str=None, score: float=None):  # noqa: E501
        """SearchResultInner - a model defined in Swagger

        :param data_location: The data_location of this SearchResultInner.  # noqa: E501
        :type data_location: str
        :param id_value: The id_value of this SearchResultInner.  # noqa: E501
        :type id_value: str
        :param name: The name of this SearchResultInner.  # noqa: E501
        :type name: str
        :param description: The description of this SearchResultInner.  # noqa: E501
        :type description: str
        :param score: The score of this SearchResultInner.  # noqa: E501
        :type score: float
        """
        self.swagger_types = {
            'data_location': str,
            'id_value': str,
            'name': str,
            'description': str,
            'score': float
        }

        self.attribute_map = {
            'data_location': 'data_location',
            'id_value': 'id_value',
            'name': 'name',
            'description': 'description',
            'score': 'score'
        }
        self._data_location = data_location
        self._id_value = id_value
        self._name = name
        self._description = description
        self._score = score

    @classmethod
    def from_dict(cls, dikt) -> 'SearchResultInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The search_result_inner of this SearchResultInner.  # noqa: E501
        :rtype: SearchResultInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_location(self) -> str:
        """Gets the data_location of this SearchResultInner.

        The location of the data (e.g. a Datamart)  # noqa: E501

        :return: The data_location of this SearchResultInner.
        :rtype: str
        """
        return self._data_location

    @data_location.setter
    def data_location(self, data_location: str):
        """Sets the data_location of this SearchResultInner.

        The location of the data (e.g. a Datamart)  # noqa: E501

        :param data_location: The data_location of this SearchResultInner.
        :type data_location: str
        """
        if data_location is None:
            raise ValueError("Invalid value for `data_location`, must not be `None`")  # noqa: E501

        self._data_location = data_location

    @property
    def id_value(self) -> str:
        """Gets the id_value of this SearchResultInner.

        The id of the dataset or variable within the data location  # noqa: E501

        :return: The id_value of this SearchResultInner.
        :rtype: str
        """
        return self._id_value

    @id_value.setter
    def id_value(self, id_value: str):
        """Sets the id_value of this SearchResultInner.

        The id of the dataset or variable within the data location  # noqa: E501

        :param id_value: The id_value of this SearchResultInner.
        :type id_value: str
        """
        if id_value is None:
            raise ValueError("Invalid value for `id_value`, must not be `None`")  # noqa: E501

        self._id_value = id_value

    @property
    def name(self) -> str:
        """Gets the name of this SearchResultInner.


        :return: The name of this SearchResultInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SearchResultInner.


        :param name: The name of this SearchResultInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this SearchResultInner.


        :return: The description of this SearchResultInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this SearchResultInner.


        :param description: The description of this SearchResultInner.
        :type description: str
        """

        self._description = description

    @property
    def score(self) -> float:
        """Gets the score of this SearchResultInner.

        Ranking of the dataset or variable based on its  proximity to the search of interest.   # noqa: E501

        :return: The score of this SearchResultInner.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this SearchResultInner.

        Ranking of the dataset or variable based on its  proximity to the search of interest.   # noqa: E501

        :param score: The score of this SearchResultInner.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score
